{"version":3,"sources":["circle.png","App.js","reportWebVitals.js","index.js"],"names":["RangeSlider","useState","population","setPopulation","infectedPercent","setInfectedPercent","contagiousRadius","setContagiousRadius","susceptibleRate","setSusceptibleRate","populationList","setPopulationList","startDisabled","setStartDisabled","activeCases","setActiveCases","recoveryTime","setRecoveryTime","status","setStatus","newStatus","setNewStatus","chartData","setChartData","chartLabel","setChartLabel","prevChartData","setPrevChartData","prevChartLabel","setPrevChartLabel","prevPopulation","setPrevPopulation","createChart","data","label","range","labels","datasets","fill","target","above","borderColor","options","animation","scales","x","title","text","display","font","size","grid","y","max","elements","point","radius","plugins","legend","useEffect","pop","stats","rec","i","push","Math","floor","cases","anime","remove","length","interval","setInterval","curTime","slice","coor","rect","document","getElementById","getBoundingClientRect","top","left","index","setTimeout","newStats","targets","concat","background","duration","easing","j","sqrt","pow","random","el","classList","add","getElementsByClassName","toString","scale","clearInterval","curChart","prevChart","start","translateX","translateY","complete","value","opacity","loop","style","flexDirection","padding","justifyContent","alignItems","marginBottom","fontSize","class","border","width","height","flexWrap","map","id","margin","position","src","Ring","borderRadius","backgroundColor","renderInfected","renderHealthy","Typography","gutterBottom","Slider","onChange","event","valueLabelDisplay","aria-labelledby","min","disabled","marginLeft","Input","onBlur","inputProps","step","type","Button","variant","color","onClick","temporaryValue","randomIndex","currentIndex","shuffle","textAlign","fontWeight","defaults","tooltip","enabled","beginAtZero","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a2ebe6c9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/circle.0772d047.png\";","import Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport React, { useState, useEffect } from 'react';\nimport anime from 'animejs/lib/anime.es.js';\nimport './App.css';\nimport Ring from './circle.png';\nimport { Line } from 'react-chartjs-2';\n\nimport { defaults } from 'react-chartjs-2';\n\n// Disable animating charts by default.\ndefaults.plugins.tooltip.enabled = true\ndefaults.scale.beginAtZero = true\n\nexport default function RangeSlider() {\n  const [population, setPopulation] = useState(52);\n  const [infectedPercent, setInfectedPercent] = useState(0)\n  const [contagiousRadius, setContagiousRadius] = useState(2)\n  const [susceptibleRate, setSusceptibleRate] = useState(20)\n  const [populationList, setPopulationList] = useState([])\n  const [startDisabled, setStartDisabled] = useState(false)\n  const [activeCases, setActiveCases] = useState(0)\n  const [recoveryTime, setRecoveryTime] = useState(3)\n  const [status, setStatus] = useState([])\n  const [newStatus, setNewStatus] = useState([])\n  const [chartData, setChartData] = useState([])\n  const [chartLabel, setChartLabel] = useState([0])\n  const [prevChartData, setPrevChartData] = useState([])\n  const [prevChartLabel, setPrevChartLabel] = useState([0])\n  const [prevPopulation, setPrevPopulation] = useState(0)\n\n  function renderHealthy(id) {\n    return (\n      <div class='population' id={id} style={{ margin: 10, display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\n        <img id={'ring'.concat(id)} src={Ring} style={{ width: 9.5, height: 9.5, position: 'absolute' }} />\n        <div id={'healthy'.concat(id)} style={{ width: 10, height: 10, borderRadius: '50%', backgroundColor: '#00FF00' }} />\n      </div>\n    )\n  }\n\n  function renderInfected(id) {\n    return (\n      <div class='population' id={id} style={{ margin: 10, display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\n        <img class='ring' src={Ring} style={{ width: 9.5, height: 9.5, position: 'absolute' }} />\n        <div id={'infected'.concat(id)} style={{ width: 10, height: 10, borderRadius: '50%', backgroundColor: '#FF0000' }} />\n      </div>\n    )\n  }\n\n  useEffect(() => {\n    var pop = []\n    var stats = []\n    var rec = []\n    for (var i = 0; i < population; i++) {\n      pop.push(i)\n      if (i < Math.floor(population * infectedPercent / 100)) {\n        stats.push(false)\n        rec.push(1)\n      } else {\n        stats.push(true)\n        rec.push(0)\n      }\n    }\n    setStatus(stats)\n    setPopulationList(pop)\n    setNewStatus(rec)\n  }, [population, infectedPercent])\n\n  useEffect(() => {\n    var cases = 0\n    for (var i = 0; i < population; i++) {\n      if (!status[i]) {\n        cases++\n      }\n    }\n    setActiveCases(cases)\n    if (cases === population && cases > 0) {\n      anime.remove('.population')\n      setStartDisabled(false)\n      if (!prevChartData.length) {\n        var data = [...chartData]\n        var label = [...chartLabel]\n        var pop = population\n        setPrevChartData(data)\n        setPrevChartLabel(label)\n        setPrevPopulation(pop)\n      }\n    }\n  }, [status])\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (startDisabled) {\n        var curTime = chartLabel.slice(-1)[0]\n        curTime += 1\n        setChartLabel([...chartLabel, curTime])\n        setChartData([...chartData, activeCases])\n        var stats = [...status]\n        var coor = []\n        for (var i = 0; i < population; i++) {\n          var element = document.getElementById(i)\n          var rect = element.getBoundingClientRect();\n          coor.push([rect.top, rect.left])\n          if (newStatus[i] === 1) {\n            var index = i\n            setTimeout(() => {\n              var newStats = [...newStatus]\n              newStats[index] = 2\n              setNewStatus(newStats)\n              anime({\n                targets: document.getElementById('infected'.concat(index)),\n                background: '#808080',\n                duration: 1000,\n                easing: 'linear'\n              });\n            }, 1000);\n          }\n        }\n        if (coor.length > 0) {\n          for (var i = 0; i < population; i++) {\n            for (var j = 0; j < population && j != i; j++) {\n              if (status[i] != status[j]) {\n                var dist = Math.sqrt(Math.pow(coor[i][0] - coor[j][0], 2) + Math.pow(coor[i][1] - coor[j][1], 2))\n                if (dist < 35) {\n                  var rand = Math.floor(Math.random() * 100)\n                  if (rand < susceptibleRate) {\n                    if (!status[i]) {\n                      var el = document.getElementById('healthy'.concat(j))\n                      document.getElementById('ring'.concat(j)).classList.add('ring')\n                      document.getElementById('ring'.concat(j)).classList.add(j)\n                      anime({\n                        targets: el,\n                        background: '#FF0000',\n                        duration: 1000,\n                        easing: 'linear',\n                      });\n                      stats[j] = false\n                      setTimeout(() => {\n                        anime({\n                          targets: el,\n                          background: '#808080',\n                          duration: 1000,\n                          easing: 'linear'\n                        })\n                        anime({\n                          targets: document.getElementsByClassName(j.toString()),\n                          scale: 0.01\n                        })\n                      }, 3000)\n                    } else {\n                      var el = document.getElementById('healthy'.concat(i))\n                      document.getElementById('ring'.concat(i)).classList.add('ring')\n                      document.getElementById('ring'.concat(i)).classList.add(i)\n                      anime({\n                        targets: el,\n                        background: '#FF0000',\n                        duration: 1000,\n                        easing: 'linear',\n                      })\n                      stats[i] = false\n                      setTimeout(() => {\n                        anime({\n                          targets: el,\n                          background: '#808080',\n                          duration: 1000,\n                          easing: 'linear'\n                        })\n                      }, 3000)\n                    }\n                  }\n                }\n              }\n            }\n          }\n          setStatus(stats)\n        }\n      }\n    }, 500)\n    return () => clearInterval(interval)\n  }, [startDisabled, status])\n\n  function handleBlur() {\n    if (population < 0) {\n      setPopulation(0);\n    } else if (population > 100) {\n      setPopulation(100);\n    }\n  }\n\n  function createChart(data, label, range) {\n    return (\n      <Line\n        data={{\n          labels: label,\n          datasets: [\n            {\n              label: '# of infected cases',\n              data: data,\n              fill: {\n                target: 'origin',\n                above: 'rgb(255, 100, 132)',   // Area will be red above the origin\n              },\n              borderColor: 'rgba(255, 99, 132, 0.2)',\n            },\n          ],\n        }}\n        options={{\n          animation: false,\n          scales: {\n            x: {\n              title: {\n                text: 'Unit of time',\n                display: true,\n                font: { size: 18 }\n              },\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              max: range + 10,\n              title: {\n                text: 'Infected cases',\n                display: true,\n                font: { size: 18 }\n              },\n            }\n          },\n          elements: {\n            point: {\n              radius: 0\n            }\n          },\n          plugins: {\n            legend: {\n              labels: {\n                font: {\n                  size: 18\n                }\n              }\n            }\n          }\n        }}\n      />\n    )\n  }\n\n  const curChart = createChart(chartData, chartLabel, population)\n  const prevChart = createChart(prevChartData, prevChartLabel, prevPopulation)\n\n  function shuffle() {\n    var currentIndex = population, temporaryValue, randomIndex;\n    var pop = [...populationList]\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = pop[currentIndex];\n      pop[currentIndex] = pop[randomIndex];\n      pop[randomIndex] = temporaryValue;\n    }\n    setPopulationList(pop)\n  }\n\n  function start() {\n    anime({\n      targets: '.population',\n      translateX: function () {\n        return anime.random(-75, 75);\n      },\n      translateY: function () {\n        return anime.random(-75, 75);\n      },\n      easing: 'linear',\n      complete: start\n    });\n    anime({\n      targets: '.ring',\n      scale: {\n        value: [1, 4],\n        duration: 5500\n      },\n      opacity: {\n        value: [1, 0],\n        duration: 1000,\n        easing: 'linear',\n      },\n      loop: true\n    })\n  }\n\n  return (\n    <div>\n      <div style={{ display: 'flex', flexDirection: 'row', padding: 40, justifyContent: 'flex-start', alignItems: 'flex-start' }}>\n        <div style={{ display: 'flex', flexDirection: 'column', }}>\n          <div style={{ display: 'flex', justifyContent: 'flex-start', marginBottom: 10 }}>\n            <text style={{ fontSize: 20 }}># Infected cases: {activeCases}</text>\n          </div>\n          <div class='border' style={{ border: '3px solid black', width: 390, height: 390, flexWrap: 'wrap', flexDirection: 'row', display: 'flex', justifyContent: 'flex-start', alignItems: 'center', padding: 80 }}>\n            {populationList.map((id) => {\n              if (id < Math.floor(population * infectedPercent / 100)) {\n                return (renderInfected(id))\n              } else {\n                return (renderHealthy(id))\n              }\n            })}\n          </div>\n        </div>\n        <div style={{ display: 'flex', flexDirection: 'column', margin: '10px 0 0 100px' }}>\n          <Typography id=\"range-slider\" gutterBottom>\n            Population\n          </Typography>\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\n            <div style={{ width: 400 }}>\n              <Slider\n                value={population}\n                onChange={(event, value) => setPopulation(value)}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"range-slider\"\n                min={0}\n                max={169}\n                disabled={startDisabled}\n              />\n            </div>\n            <div style={{ marginLeft: 10 }}>\n              <Input\n                value={population}\n                margin=\"dense\"\n                onChange={(event) => (event.target.value) ? setPopulation(event.target.value) : () => { }}\n                onBlur={handleBlur}\n                inputProps={{\n                  step: 1,\n                  min: 0,\n                  max: 169,\n                  type: 'number',\n                  'aria-labelledby': 'input-slider',\n                }}\n              />\n            </div>\n          </div>\n          <Typography id=\"range-slider\" gutterBottom>\n            Infected proportion (%)\n          </Typography>\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\n            <div style={{ width: 400 }}>\n              <Slider\n                value={infectedPercent}\n                onChange={(event, value) => setInfectedPercent(value)}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"range-slider\"\n                min={0}\n                max={100}\n                disabled={startDisabled}\n              />\n            </div>\n            <div style={{ marginLeft: 10 }}>\n              <Input\n                value={infectedPercent}\n                margin=\"dense\"\n                onChange={(event) => (event.target.value) ? setInfectedPercent(event.target.value) : () => { }}\n                inputProps={{\n                  step: 1,\n                  min: 0,\n                  max: 100,\n                  type: 'number',\n                  'aria-labelledby': 'input-slider',\n                }}\n              />\n            </div>\n          </div>\n          <Typography id=\"range-slider\" gutterBottom>\n            Contagious Radius (meters)\n          </Typography>\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\n            <div style={{ width: 400 }}>\n              <Slider\n                value={contagiousRadius}\n                onChange={(event, value) => setContagiousRadius(value)}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"range-slider\"\n                min={0}\n                step={0.2}\n                max={5}\n                disabled={startDisabled}\n              />\n            </div>\n            <div style={{ marginLeft: 10 }}>\n              <Input\n                value={contagiousRadius}\n                margin=\"dense\"\n                onChange={(event) => (event.target.value) ? setContagiousRadius(event.target.value) : () => { }}\n                inputProps={{\n                  step: 0.1,\n                  min: 0,\n                  max: 5,\n                  type: 'number',\n                  'aria-labelledby': 'input-slider',\n                }}\n              />\n            </div>\n          </div>\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', width: 400, height: 75 }}>\n            <div style={{ height: 10, width: 10, borderRadius: 10, backgroundColor: 'red' }} />\n            <img src={Ring} style={{ height: contagiousRadius * 20, width: contagiousRadius * 20, position: 'absolute' }}></img>\n          </div>\n          <Typography id=\"range-slider\" gutterBottom>\n            Susceptible Rate (%)\n          </Typography>\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\n            <div style={{ width: 400 }}>\n              <Slider\n                value={susceptibleRate}\n                onChange={(event, value) => setSusceptibleRate(value)}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"range-slider\"\n                min={0}\n                max={100}\n                disabled={startDisabled}\n              />\n            </div>\n            <div style={{ marginLeft: 10 }}>\n              <Input\n                value={susceptibleRate}\n                margin=\"dense\"\n                onChange={(event) => (event.target.value) ? setSusceptibleRate(event.target.value) : () => { }}\n                inputProps={{\n                  step: 1,\n                  min: 0,\n                  max: 100,\n                  type: 'number',\n                  'aria-labelledby': 'input-slider',\n                }}\n              />\n            </div>\n          </div>\n          <Typography id=\"range-slider\" gutterBottom>\n            Recovery time (units)\n          </Typography>\n          <div style={{ display: 'flex', flexDirection: 'row', marginBottom: 40 }}>\n            <div style={{ width: 400 }}>\n              <Slider\n                value={recoveryTime}\n                onChange={(event, value) => setRecoveryTime(value)}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"range-slider\"\n                min={0}\n                max={10}\n                step={1}\n                disabled={startDisabled}\n              />\n            </div>\n            <div style={{ marginLeft: 10 }}>\n              <Input\n                value={recoveryTime}\n                margin=\"dense\"\n                onChange={(event) => (event.target.value) ? setRecoveryTime(event.target.value) : () => { }}\n                inputProps={{\n                  step: 1,\n                  min: 0,\n                  max: 10,\n                  type: 'number',\n                  'aria-labelledby': 'input-slider',\n                }}\n              />\n            </div>\n          </div>\n          Options:\n          <div style={{ display: 'flex', flexDirection: 'row', }}>\n            <div style={{ margin: 20 }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ width: 100 }}\n                onClick={() => shuffle()}\n                disabled={startDisabled}\n              >\n                Shuffle\n              </Button>\n            </div>\n            <div style={{ margin: 20 }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ width: 100 }}\n                onClick={() => {\n                  setStartDisabled(true)\n                  start()\n                }}\n                disabled={startDisabled}\n              >\n                Start\n              </Button>\n            </div>\n            <div style={{ margin: 20 }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ width: 100 }}\n                onClick={() => {\n                  anime.remove('.population')\n                  setPopulation(0)\n                  setTimeout(() => {\n                    setPopulation(52)\n                    setInfectedPercent(0)\n                  }, 100)\n                  setChartData([])\n                  setChartLabel([0])\n                  setStartDisabled(false)\n                  if (prevChartData.length) {\n                    var data = [...chartData]\n                    var label = [...chartLabel]\n                    var pop = population\n                    setPrevChartData(data)\n                    setPrevChartLabel(label)\n                    setPrevPopulation(pop)\n                  }\n                }}\n              >\n                Reset\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div style={{ padding: 40, width: 1000 }}>\n        {curChart}\n        {(prevChartData.length) ? (\n          <div style={{ width: 1000, textAlign: 'center', fontSize: 20, fontWeight: 'bold' }}>\n            <div style={{ margin: 40 }}>Previous model</div>\n            {prevChart}\n          </div>\n        ) : (\n          <></>\n        )}\n      </div>\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}