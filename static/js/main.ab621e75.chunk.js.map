{"version":3,"sources":["circle.png","test.js","App.js","reportWebVitals.js","index.js"],"names":["RangeSlider","useState","population","setPopulation","infectedPercent","setInfectedPercent","contagiousRadius","setContagiousRadius","susceptibleRate","setSusceptibleRate","populationList","setPopulationList","startDisabled","setStartDisabled","activeCases","setActiveCases","recoveryTime","setRecoveryTime","status","setStatus","newStatus","setNewStatus","chartData","setChartData","chartLabel","setChartLabel","prevChartData","setPrevChartData","prevChartLabel","setPrevChartLabel","prevPopulation","setPrevPopulation","start","anime","targets","translateX","random","translateY","easing","duration","complete","scale","value","opacity","loop","createChart","data","label","range","labels","datasets","fill","target","above","borderColor","options","animation","scales","x","title","text","display","font","size","grid","y","max","elements","point","radius","plugins","legend","useEffect","pop","stats","rec","i","push","Math","floor","cases","remove","interval","setInterval","curTime","slice","coor","rect","document","getElementById","getBoundingClientRect","top","left","index","setTimeout","newStats","concat","background","length","j","sqrt","pow","rand","console","log","el","classList","add","getElementsByClassName","toString","clearInterval","curChart","prevChart","createSlider","name","parameter","paramfunc","maxVal","stepSize","Typography","id","gutterBottom","style","fontSize","flexDirection","width","Slider","onChange","event","valueLabelDisplay","aria-labelledby","min","step","disabled","marginLeft","Input","margin","inputProps","type","justifyContent","alignItems","marginBottom","class","border","height","flexWrap","padding","map","position","src","Ring","borderRadius","backgroundColor","renderInfected","renderHealthy","marginTop","Button","variant","color","onClick","temporaryValue","randomIndex","currentIndex","shuffle","textAlign","fontWeight","defaults","tooltip","enabled","beginAtZero","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ab621e75.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/circle.0772d047.png\";","import Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport React, { useState, useEffect } from 'react';\nimport anime from 'animejs/lib/anime.es.js';\nimport './App.css';\nimport Ring from './circle.png';\nimport { Line } from 'react-chartjs-2';\n\nimport { defaults } from 'react-chartjs-2';\n\n// Disable animating charts by default.\ndefaults.plugins.tooltip.enabled = true\ndefaults.scale.beginAtZero = true\n\nexport default function RangeSlider() {\n  const [population, setPopulation] = useState(52);\n  const [infectedPercent, setInfectedPercent] = useState(0)\n  const [contagiousRadius, setContagiousRadius] = useState(2)\n  const [susceptibleRate, setSusceptibleRate] = useState(20)\n  const [populationList, setPopulationList] = useState([])\n  const [startDisabled, setStartDisabled] = useState(false)\n  const [activeCases, setActiveCases] = useState(0)\n  const [recoveryTime, setRecoveryTime] = useState(3)\n  const [status, setStatus] = useState([])\n  const [newStatus, setNewStatus] = useState([])\n  const [chartData, setChartData] = useState([])\n  const [chartLabel, setChartLabel] = useState([0])\n  const [prevChartData, setPrevChartData] = useState([])\n  const [prevChartLabel, setPrevChartLabel] = useState([0])\n  const [prevPopulation, setPrevPopulation] = useState(0)\n\n  function renderHealthy(id) {\n    return (\n      <div class='population' id={id} style={{ margin: 5, display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\n        <img id={'ring'.concat(id)} src={Ring} style={{ width: 5, height: 5, position: 'absolute' }} />\n        <div id={'healthy'.concat(id)} style={{ width: 5, height: 5, borderRadius: '50%', backgroundColor: '#00FF00' }} />\n      </div>\n    )\n  }\n\n  function renderInfected(id) {\n    return (\n      <div class='population' id={id} style={{ margin: 5, display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\n        <img class='ring' src={Ring} style={{ width: 5, height: 5, position: 'absolute' }} />\n        <div id={'infected'.concat(id)} style={{ width: 5, height: 5, borderRadius: '50%', backgroundColor: '#FF0000' }} />\n      </div>\n    )\n  }\n\n  useEffect(() => {\n    var pop = []\n    var stats = []\n    var rec = []\n    for (var i = 0; i < population; i++) {\n      pop.push(i)\n      if (i < Math.floor(population * infectedPercent / 100)) {\n        stats.push(false)\n        rec.push(1)\n      } else {\n        stats.push(true)\n        rec.push(0)\n      }\n    }\n    setStatus(stats)\n    setPopulationList(pop)\n    setNewStatus(rec)\n  }, [population, infectedPercent])\n\n  useEffect(() => {\n    var cases = 0\n    for (var i = 0; i < population; i++) {\n      if (!status[i]) {\n        cases++\n      }\n    }\n    setActiveCases(cases)\n    if (cases === population && cases > 0) {\n      anime.remove('.population')\n      setStartDisabled(false)\n    }\n  }, [status])\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (startDisabled) {\n        var curTime = chartLabel.slice(-1)[0]\n        curTime += 1\n        setChartLabel([...chartLabel, curTime])\n        setChartData([...chartData, activeCases])\n        var stats = [...status]\n        var coor = []\n        for (var i = 0; i < population; i++) {\n          var element = document.getElementById(i)\n          var rect = element.getBoundingClientRect();\n          coor.push([rect.top, rect.left])\n          if (newStatus[i] === 1) {\n            var index = i\n            setTimeout(() => {\n              var newStats = [...newStatus]\n              newStats[index] = 2\n              setNewStatus(newStats)\n              anime({\n                targets: document.getElementById('infected'.concat(index)),\n                background: '#808080',\n                duration: 1000,\n                easing: 'linear'\n              });\n            }, 1000);\n          }\n        }\n        if (coor.length > 0) {\n          for (var i = 0; i < population; i++) {\n            for (var j = 0; j < population && j != i; j++) {\n              if (status[i] != status[j]) {\n                var dist = Math.sqrt(Math.pow(coor[i][0] - coor[j][0], 2) + Math.pow(coor[i][1] - coor[j][1], 2))\n                if (dist < 35) {\n                  var rand = Math.random()\n                  console.log(rand)\n                  if (rand > susceptibleRate / 100) {\n                    continue\n                  } else {\n                    console.log(true)\n                    if (!status[i]) {\n                      var el = document.getElementById('healthy'.concat(j))\n                      document.getElementById('ring'.concat(j)).classList.add('ring')\n                      document.getElementById('ring'.concat(j)).classList.add(j)\n                      anime({\n                        targets: el,\n                        background: '#FF0000',\n                        duration: 1000,\n                        easing: 'linear',\n                      });\n                      stats[j] = false\n                      setTimeout(() => {\n                        anime({\n                          targets: el,\n                          background: '#808080',\n                          duration: 1000,\n                          easing: 'linear'\n                        })\n                        anime({\n                          targets: document.getElementsByClassName(j.toString()),\n                          scale: 0.01\n                        })\n                      }, 3000)\n                    } else {\n                      var el = document.getElementById('healthy'.concat(i))\n                      document.getElementById('ring'.concat(i)).classList.add('ring')\n                      document.getElementById('ring'.concat(i)).classList.add(i)\n                      anime({\n                        targets: el,\n                        background: '#FF0000',\n                        duration: 1000,\n                        easing: 'linear',\n                      })\n                      stats[i] = false\n                      setTimeout(() => {\n                        anime({\n                          targets: el,\n                          background: '#808080',\n                          duration: 1000,\n                          easing: 'linear'\n                        })\n                      }, 3000)\n                    }\n                  }\n                }\n              }\n            }\n          }\n          setStatus(stats)\n        }\n      }\n    }, 500)\n    return () => clearInterval(interval)\n  }, [startDisabled, status])\n\n  function shuffle() {\n    var currentIndex = population, temporaryValue, randomIndex;\n    var pop = [...populationList]\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = pop[currentIndex];\n      pop[currentIndex] = pop[randomIndex];\n      pop[randomIndex] = temporaryValue;\n    }\n    setPopulationList(pop)\n  }\n\n  function start() {\n    anime({\n      targets: '.population',\n      translateX: function () {\n        return anime.random(-50, 50);\n      },\n      translateY: function () {\n        return anime.random(-50, 50);\n      },\n      easing: 'linear',\n      duration: 1000,\n      complete: start\n    });\n    anime({\n      targets: '.ring',\n      scale: {\n        value: [1, 4],\n        duration: 5500\n      },\n      opacity: {\n        value: [1, 0],\n        duration: 1000,\n        easing: 'linear',\n      },\n      loop: true\n    })\n  }\n\n  function createChart(data, label, range) {\n    return (\n      <Line\n        data={{\n          labels: label,\n          datasets: [\n            {\n              label: '# of infected cases',\n              data: data,\n              fill: {\n                target: 'origin',\n                above: 'rgb(255, 100, 132)',\n              },\n              borderColor: 'rgba(255, 99, 132, 0.2)',\n            },\n          ],\n        }}\n        options={{\n          animation: false,\n          scales: {\n            x: {\n              title: {\n                text: 'Unit of time',\n                display: true,\n                font: { size: 14 }\n              },\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              max: range + 10,\n              title: {\n                text: 'Infected cases',\n                display: true,\n                font: { size: 14 }\n              },\n            }\n          },\n          elements: {\n            point: {\n              radius: 0\n            }\n          },\n          plugins: {\n            legend: {\n              labels: {\n                font: {\n                  size: 14\n                }\n              }\n            }\n          }\n        }}\n      />\n    )\n  }\n\n  const curChart = createChart(chartData, chartLabel, population)\n  const prevChart = createChart(prevChartData, prevChartLabel, prevPopulation)\n\n  function createSlider(name, parameter, paramfunc, maxVal, stepSize) {\n    return (\n      <div>\n        <Typography id=\"range-slider\" gutterBottom style={{ fontSize: 14 }}>\n          {name}\n        </Typography>\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\n          <div style={{ width: 300 }}>\n            <Slider\n              value={parameter}\n              onChange={(event, value) => paramfunc(value)}\n              valueLabelDisplay=\"auto\"\n              aria-labelledby=\"range-slider\"\n              min={0}\n              max={maxVal}\n              step={stepSize}\n              disabled={startDisabled}\n            />\n          </div>\n          <div style={{ marginLeft: 10 }}>\n            <Input\n              value={parameter}\n              margin=\"dense\"\n              onChange={(event) => (event.target.value) ? paramfunc(event.target.value) : () => { }}\n              inputProps={{\n                step: stepSize,\n                min: 0,\n                max: maxVal,\n                type: 'number',\n                'aria-labelledby': 'input-slider',\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <div style={{ display: 'flex', flexDirection: 'row', margin: '10px 0 0 30px', justifyContent: 'flex-start', alignItems: 'flex-start' }}>\n        <div style={{ display: 'flex', flexDirection: 'column', }}>\n          <div style={{ display: 'flex', justifyContent: 'flex-start', marginBottom: 10 }}>\n            <text style={{ fontSize: 14 }}># Infected cases: {activeCases}</text>\n          </div>\n          <div class='border' style={{ border: '3px solid black', width: 200, height: 200, flexWrap: 'wrap', flexDirection: 'row', display: 'flex', justifyContent: 'flex-start', alignItems: 'center', padding: 65, marginBottom: 40 }}>\n            {populationList.map((id) => {\n              if (id < Math.floor(population * infectedPercent / 100)) {\n                return (renderInfected(id))\n              } else {\n                return (renderHealthy(id))\n              }\n            })}\n          </div>\n          {createSlider('Population', population, setPopulation, 169, 1)}\n          {createSlider('Infected proportion (%)', infectedPercent, setInfectedPercent, 100, 1)}\n          {createSlider('Contagious Radius (meters)', contagiousRadius, setContagiousRadius, 5, 0.1)}\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', width: 350, height: 100, }}>\n            <div style={{ height: 10, width: 10, borderRadius: 10, backgroundColor: 'red' }} />\n            <img src={Ring} style={{ height: contagiousRadius * 20, width: contagiousRadius * 20, position: 'absolute' }} />\n          </div>\n          {createSlider('Susceptible Rate (%)', susceptibleRate, setSusceptibleRate, 100, 1)}\n          {createSlider('Recovery time (units)', recoveryTime, setRecoveryTime, 10, 1)}\n          <div style={{ display: 'flex', flexDirection: 'row', marginTop: 20 }}>\n            <div style={{ margin: 10 }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ width: 100 }}\n                onClick={() => shuffle()}\n                disabled={startDisabled}\n              >\n                Shuffle\n              </Button>\n            </div>\n            <div style={{ margin: 10 }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ width: 100 }}\n                onClick={() => {\n                  setStartDisabled(true)\n                  start()\n                }}\n                disabled={startDisabled}\n              >\n                Start\n              </Button>\n            </div>\n            <div style={{ margin: 10 }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ width: 100 }}\n                onClick={() => {\n                  anime.remove('.population')\n                  setPopulation(0)\n                  setTimeout(() => {\n                    setPopulation(52)\n                    setInfectedPercent(0)\n                    setSusceptibleRate(20)\n                  }, 100)\n                  setChartData([])\n                  setChartLabel([0])\n                  setStartDisabled(false)\n                  // if (prevChartData.length === 0) {\n                  var data = [...chartData]\n                  var label = [...chartLabel]\n                  var pop = population\n                  setPrevChartData(data)\n                  setPrevChartLabel(label)\n                  setPrevPopulation(pop)\n                  // }\n                }}\n              >\n                Reset\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div style={{ padding: 40, width: 600 }}>\n          {curChart}\n          {(prevChartData.length) ? (\n            <div style={{ width: 650, textAlign: 'center', fontSize: 20, fontWeight: 'bold' }}>\n              <div style={{ margin: 40 }}>Previous model</div>\n              {prevChart}\n            </div>\n          ) : (\n            <></>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Button from '@material-ui/core/Button';\nimport Input from '@material-ui/core/Input';\nimport React, { useState, useEffect } from 'react';\nimport anime from 'animejs/lib/anime.es.js';\nimport './App.css';\nimport Ring from './circle.png';\nimport { Line } from 'react-chartjs-2';\n\nimport { defaults } from 'react-chartjs-2';\n\n// Disable animating charts by default.\ndefaults.plugins.tooltip.enabled = true\ndefaults.scale.beginAtZero = true\n\nexport default function RangeSlider() {\n  const [population, setPopulation] = useState(52);\n  const [infectedPercent, setInfectedPercent] = useState(0)\n  const [contagiousRadius, setContagiousRadius] = useState(2)\n  const [susceptibleRate, setSusceptibleRate] = useState(20)\n  const [populationList, setPopulationList] = useState([])\n  const [startDisabled, setStartDisabled] = useState(false)\n  const [activeCases, setActiveCases] = useState(0)\n  const [recoveryTime, setRecoveryTime] = useState(3)\n  const [status, setStatus] = useState([])\n  const [newStatus, setNewStatus] = useState([])\n  const [chartData, setChartData] = useState([])\n  const [chartLabel, setChartLabel] = useState([0])\n  const [prevChartData, setPrevChartData] = useState([])\n  const [prevChartLabel, setPrevChartLabel] = useState([0])\n  const [prevPopulation, setPrevPopulation] = useState(0)\n\n  function renderHealthy(id) {\n    return (\n      <div class='population' id={id} style={{ margin: 5, display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\n        <img id={'ring'.concat(id)} src={Ring} style={{ width: 5, height: 5, position: 'absolute' }} />\n        <div id={'healthy'.concat(id)} style={{ width: 5, height: 5, borderRadius: '50%', backgroundColor: '#00FF00' }} />\n      </div>\n    )\n  }\n\n  function renderInfected(id) {\n    return (\n      <div class='population' id={id} style={{ margin: 5, display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\n        <img class='ring' src={Ring} style={{ width: 5, height: 5, position: 'absolute' }} />\n        <div id={'infected'.concat(id)} style={{ width: 5, height: 5, borderRadius: '50%', backgroundColor: '#FF0000' }} />\n      </div>\n    )\n  }\n\n  useEffect(() => {\n    var pop = []\n    var stats = []\n    var rec = []\n    for (var i = 0; i < population; i++) {\n      pop.push(i)\n      if (i < Math.floor(population * infectedPercent / 100)) {\n        stats.push(false)\n        rec.push(1)\n      } else {\n        stats.push(true)\n        rec.push(0)\n      }\n    }\n    setStatus(stats)\n    setPopulationList(pop)\n    setNewStatus(rec)\n  }, [population, infectedPercent])\n\n  useEffect(() => {\n    var cases = 0\n    for (var i = 0; i < population; i++) {\n      if (!status[i]) {\n        cases++\n      }\n    }\n    setActiveCases(cases)\n    if (cases === population && cases > 0) {\n      anime.remove('.population')\n      setStartDisabled(false)\n    }\n  }, [status])\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (startDisabled) {\n        var curTime = chartLabel.slice(-1)[0]\n        curTime += 1\n        setChartLabel([...chartLabel, curTime])\n        setChartData([...chartData, activeCases])\n        var stats = [...status]\n        var coor = []\n        for (var i = 0; i < population; i++) {\n          var element = document.getElementById(i)\n          var rect = element.getBoundingClientRect();\n          coor.push([rect.top, rect.left])\n          if (newStatus[i] === 1) {\n            var index = i\n            setTimeout(() => {\n              var newStats = [...newStatus]\n              newStats[index] = 2\n              setNewStatus(newStats)\n              anime({\n                targets: document.getElementById('infected'.concat(index)),\n                background: '#808080',\n                duration: 1000,\n                easing: 'linear'\n              });\n            }, 1000);\n          }\n        }\n        if (coor.length > 0) {\n          for (var i = 0; i < population; i++) {\n            for (var j = 0; j < population && j != i; j++) {\n              if (status[i] != status[j]) {\n                var dist = Math.sqrt(Math.pow(coor[i][0] - coor[j][0], 2) + Math.pow(coor[i][1] - coor[j][1], 2))\n                if (dist < 35) {\n                  var rand = Math.random()\n                  console.log(rand)\n                  if (rand > susceptibleRate / 100) {\n                    break\n                  } else {\n                    console.log(true)\n                    if (!status[i]) {\n                      var el = document.getElementById('healthy'.concat(j))\n                      document.getElementById('ring'.concat(j)).classList.add('ring')\n                      document.getElementById('ring'.concat(j)).classList.add(j)\n                      anime({\n                        targets: el,\n                        background: '#FF0000',\n                        duration: 1000,\n                        easing: 'linear',\n                      });\n                      stats[j] = false\n                      setTimeout(() => {\n                        anime({\n                          targets: el,\n                          background: '#808080',\n                          duration: 1000,\n                          easing: 'linear'\n                        })\n                        anime({\n                          targets: document.getElementsByClassName(j.toString()),\n                          scale: 0.01\n                        })\n                      }, 3000)\n                    } else {\n                      var el = document.getElementById('healthy'.concat(i))\n                      document.getElementById('ring'.concat(i)).classList.add('ring')\n                      document.getElementById('ring'.concat(i)).classList.add(i)\n                      anime({\n                        targets: el,\n                        background: '#FF0000',\n                        duration: 1000,\n                        easing: 'linear',\n                      })\n                      stats[i] = false\n                      setTimeout(() => {\n                        anime({\n                          targets: el,\n                          background: '#808080',\n                          duration: 1000,\n                          easing: 'linear'\n                        })\n                      }, 3000)\n                    }\n                  }\n                }\n              }\n            }\n          }\n          setStatus(stats)\n        }\n      }\n    }, 500)\n    return () => clearInterval(interval)\n  }, [startDisabled, status])\n\n  function shuffle() {\n    var currentIndex = population, temporaryValue, randomIndex;\n    var pop = [...populationList]\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = pop[currentIndex];\n      pop[currentIndex] = pop[randomIndex];\n      pop[randomIndex] = temporaryValue;\n    }\n    setPopulationList(pop)\n  }\n\n  function start() {\n    anime({\n      targets: '.population',\n      translateX: function () {\n        return anime.random(-50, 50);\n      },\n      translateY: function () {\n        return anime.random(-50, 50);\n      },\n      easing: 'linear',\n      duration: 1000,\n      complete: start\n    });\n    anime({\n      targets: '.ring',\n      scale: {\n        value: [1, 4],\n        duration: 5500\n      },\n      opacity: {\n        value: [1, 0],\n        duration: 1000,\n        easing: 'linear',\n      },\n      loop: true\n    })\n  }\n\n  function createChart(data, label, range) {\n    return (\n      <Line\n        data={{\n          labels: label,\n          datasets: [\n            {\n              label: '# of infected cases',\n              data: data,\n              fill: {\n                target: 'origin',\n                above: 'rgb(255, 100, 132)',\n              },\n              borderColor: 'rgba(255, 99, 132, 0.2)',\n            },\n          ],\n        }}\n        options={{\n          animation: false,\n          scales: {\n            x: {\n              title: {\n                text: 'Unit of time',\n                display: true,\n                font: { size: 14 }\n              },\n              grid: {\n                display: false\n              }\n            },\n            y: {\n              max: range + 10,\n              title: {\n                text: 'Infected cases',\n                display: true,\n                font: { size: 14 }\n              },\n            }\n          },\n          elements: {\n            point: {\n              radius: 0\n            }\n          },\n          plugins: {\n            legend: {\n              labels: {\n                font: {\n                  size: 14\n                }\n              }\n            }\n          }\n        }}\n      />\n    )\n  }\n\n  const curChart = createChart(chartData, chartLabel, population)\n  const prevChart = createChart(prevChartData, prevChartLabel, prevPopulation)\n\n  function createSlider(name, parameter, paramfunc, maxVal, stepSize) {\n    return (\n      <div>\n        <Typography id=\"range-slider\" gutterBottom style={{ fontSize: 14 }}>\n          {name}\n        </Typography>\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\n          <div style={{ width: 300 }}>\n            <Slider\n              value={parameter}\n              onChange={(event, value) => paramfunc(value)}\n              valueLabelDisplay=\"auto\"\n              aria-labelledby=\"range-slider\"\n              min={0}\n              max={maxVal}\n              step={stepSize}\n              disabled={startDisabled}\n            />\n          </div>\n          <div style={{ marginLeft: 10 }}>\n            <Input\n              value={parameter}\n              margin=\"dense\"\n              onChange={(event) => (event.target.value) ? paramfunc(event.target.value) : () => { }}\n              inputProps={{\n                step: stepSize,\n                min: 0,\n                max: maxVal,\n                type: 'number',\n                'aria-labelledby': 'input-slider',\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <div style={{ display: 'flex', flexDirection: 'row', margin: '10px 0 0 30px', justifyContent: 'flex-start', alignItems: 'flex-start' }}>\n        <div style={{ display: 'flex', flexDirection: 'column', }}>\n          <div style={{ display: 'flex', justifyContent: 'flex-start', marginBottom: 10 }}>\n            <text style={{ fontSize: 14 }}># Infected cases: {activeCases}</text>\n          </div>\n          <div class='border' style={{ border: '3px solid black', width: 200, height: 200, flexWrap: 'wrap', flexDirection: 'row', display: 'flex', justifyContent: 'flex-start', alignItems: 'center', padding: 65, marginBottom: 40 }}>\n            {populationList.map((id) => {\n              if (id < Math.floor(population * infectedPercent / 100)) {\n                return (renderInfected(id))\n              } else {\n                return (renderHealthy(id))\n              }\n            })}\n          </div>\n          {createSlider('Population', population, setPopulation, 169, 1)}\n          {createSlider('Infected proportion (%)', infectedPercent, setInfectedPercent, 100, 1)}\n          {createSlider('Contagious Radius (meters)', contagiousRadius, setContagiousRadius, 5, 0.1)}\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', width: 350, height: 100, }}>\n            <div style={{ height: 10, width: 10, borderRadius: 10, backgroundColor: 'red' }} />\n            <img src={Ring} style={{ height: contagiousRadius * 20, width: contagiousRadius * 20, position: 'absolute' }} />\n          </div>\n          {createSlider('Susceptible Rate (%)', susceptibleRate, setSusceptibleRate, 100, 1)}\n          {createSlider('Recovery time (units)', recoveryTime, setRecoveryTime, 10, 1)}\n          <div style={{ display: 'flex', flexDirection: 'row', marginTop: 20 }}>\n            <div style={{ margin: 10 }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ width: 100 }}\n                onClick={() => shuffle()}\n                disabled={startDisabled}\n              >\n                Shuffle\n              </Button>\n            </div>\n            <div style={{ margin: 10 }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ width: 100 }}\n                onClick={() => {\n                  setStartDisabled(true)\n                  start()\n                }}\n                disabled={startDisabled}\n              >\n                Start\n              </Button>\n            </div>\n            <div style={{ margin: 10 }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ width: 100 }}\n                onClick={() => {\n                  anime.remove('.population')\n                  setPopulation(0)\n                  setTimeout(() => {\n                    setPopulation(52)\n                    setInfectedPercent(0)\n                    setSusceptibleRate(20)\n                  }, 100)\n                  setChartData([])\n                  setChartLabel([0])\n                  setStartDisabled(false)\n                  // if (prevChartData.length === 0) {\n                  var data = [...chartData]\n                  var label = [...chartLabel]\n                  var pop = population\n                  setPrevChartData(data)\n                  setPrevChartLabel(label)\n                  setPrevPopulation(pop)\n                  // }\n                }}\n              >\n                Reset\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div style={{ padding: 40, width: 600 }}>\n          {curChart}\n          {(prevChartData.length) ? (\n            <div style={{ width: 650, textAlign: 'center', fontSize: 20, fontWeight: 'bold' }}>\n              <div style={{ margin: 40 }}>Previous model</div>\n              {prevChart}\n            </div>\n          ) : (\n            <></>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Test from './test';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Test />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}