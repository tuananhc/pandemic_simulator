{"version":3,"sources":["circle.png","App.js","test.js","reportWebVitals.js","index.js"],"names":["App","useState","population","setPopulation","infectedPercent","setInfectedPercent","contagiousRadius","setContagiousRadius","susceptibleRate","setSusceptibleRate","populationList","setPopulationList","startDisabled","setStartDisabled","recoveryTime","setRecoveryTime","healthy","setHealthy","infected","setInfected","recovered","setRecovered","chartData","setChartData","chartLabel","setChartLabel","prevChartData","setPrevChartData","prevChartLabel","setPrevChartLabel","chartProps","setChartProps","first","setFirst","start","anime","targets","translateX","random","translateY","easing","duration","complete","scale","value","Math","sqrt","opacity","loop","createChart","data","label","props","style","display","alignItems","width","labels","datasets","fill","target","above","borderColor","options","animation","scales","x","title","text","font","size","grid","y","max","pop","elements","point","radius","plugins","legend","border","height","flexDirection","justifyContent","paddingLeft","margin","rate","time","useEffect","i","push","slice","floor","filter","item","setTimeout","document","getElementById","concat","background","remove","clear","interval","setInterval","curTime","length","j","includes","rect1","getBoundingClientRect","rect2","pow","top","left","el","ring","classList","add","clearInterval","curChart","prevChart","createSlider","name","parameter","paramfunc","maxVal","minVal","stepSize","Typography","id","gutterBottom","fontSize","Slider","onChange","event","valueLabelDisplay","aria-labelledby","min","step","disabled","marginLeft","Input","inputProps","type","padding","marginBottom","flex","flexWrap","map","class","position","src","Ring","borderRadius","backgroundColor","renderInfected","renderHealthy","marginTop","Button","variant","color","onClick","temporaryValue","randomIndex","currentIndex","shuffle","querySelectorAll","forEach","fontWeight","textAlign","defaults","tooltip","enabled","beginAtZero","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2cbae65e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/circle.0772d047.png\";","import Typography from '@material-ui/core/Typography';\nimport { Slider, Button, Input } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport anime from 'animejs/lib/anime.es.js';\nimport './App.css';\nimport Ring from './circle.png';\nimport { Line, defaults } from 'react-chartjs-2';\n\ndefaults.plugins.tooltip.enabled = true\ndefaults.scale.beginAtZero = true\n\nexport default function App() {\n  const [population, setPopulation] = useState(52);\n  const [infectedPercent, setInfectedPercent] = useState(0)\n  const [contagiousRadius, setContagiousRadius] = useState(1)\n  const [susceptibleRate, setSusceptibleRate] = useState(20)\n  const [populationList, setPopulationList] = useState([])\n  const [startDisabled, setStartDisabled] = useState(false)\n  const [recoveryTime, setRecoveryTime] = useState(3)\n  const [healthy, setHealthy] = useState([])\n  const [infected, setInfected] = useState([])\n  const [recovered, setRecovered] = useState([])\n  const [chartData, setChartData] = useState([])\n  const [chartLabel, setChartLabel] = useState([0])\n  const [prevChartData, setPrevChartData] = useState([])\n  const [prevChartLabel, setPrevChartLabel] = useState([0])\n  const [chartProps, setChartProps] = useState({})\n  const [first, setFirst] = useState(true)\n\n  function renderHealthy(id) {\n    return (\n      <div class='population' id={id} style={{ margin: 5, display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\n        <img id={'ring'.concat(id)} src={Ring} style={{ width: 5, height: 5, position: 'absolute' }} />\n        <div id={'healthy'.concat(id)} style={{ width: 5, height: 5, borderRadius: '50%', backgroundColor: '#66FF33' }} />\n      </div>\n    )\n  }\n\n  function renderInfected(id) {\n    return (\n      <div class='population' id={id} style={{ margin: 5, display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\n        <img class='infect ring' src={Ring} style={{ width: 5, height: 5, position: 'absolute' }} />\n        <div id={'infected'.concat(id)} class='infected' style={{ width: 5, height: 5, borderRadius: '50%', backgroundColor: '#FF0000' }} />\n      </div>\n    )\n  }\n\n  useEffect(() => {\n    var pop = []\n    for (var i = 0; i < population; i++) {\n      pop.push(i)\n    }\n    setPopulationList(pop)\n    setInfected(pop.slice(0, Math.floor(population * infectedPercent / 100)))\n    setHealthy(pop.slice(Math.floor(population * infectedPercent / 100)))\n  }, [population, infectedPercent])\n\n  useEffect(() => {\n    if (startDisabled) {\n      var value = infected.slice(-1)[0]\n      clear(value)\n    }\n  }, [infected])\n\n  function clear(value) {\n    setHealthy(healthy => healthy.filter((item) => item !== value))\n    setTimeout(() => {\n      var target = document.getElementById('healthy'.concat(value))\n      anime({\n        targets: target,\n        background: '#808080',\n        duration: 1000,\n        easing: 'linear'\n      })\n      target = document.getElementById('ring'.concat(value))\n      if (target !== null) {\n        target.remove()\n      }\n      setHealthy(healthy => healthy.filter((item) => item !== value))\n      setRecovered(recovered => [...recovered, value])\n    }, 1000 * recoveryTime)\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (startDisabled) {\n        // if (infected.length - recovered.length !== 0) {\n        //   setChartData(chartData => [...chartData, infected.length - recovered.length])\n        //   var curTime = chartLabel.slice(-1)[0]\n        //   curTime += 1\n        //   setChartLabel(chartLabel => [...chartLabel, curTime])\n        // }\n        var curTime = chartLabel.slice(-1)[0]\n        curTime += 1\n        setChartLabel([...chartLabel, curTime])\n        setChartData([...chartData, infected.length - recovered.length])\n        for (var i = 0; i < healthy.length; i++) {\n          for (var j = 0; j < infected.length; j++) {\n            if (recovered.includes(infected[j])) {\n              continue\n            }\n            var element1 = document.getElementById(healthy[i])\n            var rect1 = element1.getBoundingClientRect();\n            var element2 = document.getElementById(infected[j])\n            var rect2 = element2.getBoundingClientRect();\n            var dist = Math.sqrt(Math.pow(rect1.top - rect2.top, 2) + Math.pow(rect1.left - rect2.left, 2))\n            if (dist < 25 * contagiousRadius) {\n              var rand = Math.random() * 100\n              if (rand < susceptibleRate) {\n                var el = document.getElementById('healthy'.concat(healthy[i]))\n                var ring = document.getElementById('ring'.concat(healthy[i]))\n                if (ring !== null) {\n                  ring.classList.add('ring')\n                }\n                anime({\n                  targets: el,\n                  background: '#FF0000',\n                  duration: 1000,\n                  easing: 'linear',\n                });\n                if (!infected.includes(healthy[i])) {\n                  setInfected(infected => [...infected, healthy[i]])\n                }\n                break\n              }\n            }\n          }\n        }\n      }\n    }, 1000)\n    return () => clearInterval(interval)\n  }, [startDisabled, healthy, infected, recovered])\n\n  function shuffle() {\n    var currentIndex = population, temporaryValue, randomIndex;\n    var pop = [...populationList]\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = pop[currentIndex];\n      pop[currentIndex] = pop[randomIndex];\n      pop[randomIndex] = temporaryValue;\n    }\n    setPopulationList(pop)\n  }\n\n  function start() {\n    anime({\n      targets: '.population',\n      translateX: function () {\n        return anime.random(-50, 50);\n      },\n      translateY: function () {\n        return anime.random(-50, 50);\n      },\n      easing: 'linear',\n      duration: 1000,\n      complete: start\n    });\n    anime({\n      targets: '.ring',\n      scale: {\n        value: [1, 4 * Math.sqrt(contagiousRadius)],\n        duration: 4000\n      },\n      opacity: {\n        value: [1, 0],\n        duration: 750,\n        easing: 'linear',\n      },\n      loop: true\n    })\n  }\n\n  function createChart(data, label, props) {\n    return (\n      <div style={{ display: 'flex', alignItems: 'center' }}>\n        <div style={{ width: 725 }}>\n          <Line\n            data={{\n              labels: label,\n              datasets: [\n                {\n                  label: '# of infected cases',\n                  data: data,\n                  fill: {\n                    target: 'origin',\n                    above: 'rgb(255, 100, 132)',\n                  },\n                  borderColor: 'rgba(255, 99, 132, 0.2)',\n                },\n              ],\n            }}\n            options={{\n              animation: false,\n              scales: {\n                x: {\n                  title: {\n                    text: 'Unit of time',\n                    display: true,\n                    font: { size: 14 }\n                  },\n                  grid: {\n                    display: false\n                  }\n                },\n                y: {\n                  max: props.pop + 10,\n                  title: {\n                    text: 'Infected cases',\n                    display: true,\n                    font: { size: 14 }\n                  },\n                }\n              },\n              elements: {\n                point: {\n                  radius: 0\n                }\n              },\n              plugins: {\n                legend: {\n                  labels: {\n                    font: {\n                      size: 14\n                    }\n                  }\n                }\n              }\n            }}\n          />\n        </div>\n        <div style={{ border: '3px solid black', display: 'flex', width: 200, height: 150, flexDirection: 'column', justifyContent: 'center', paddingLeft: 10, margin: '0 0 40px 40px' }}>\n          Population: {props.pop}\n          <br />\n          Infected proportion: {props.infected}%\n          <br />\n          Contagious radius: {props.radius}m\n          <br />\n          Susceptible Rate: {props.rate}%\n          <br />\n          Recovery Time: {props.time}\n        </div>\n      </div>\n    )\n  }\n\n  const curChart = createChart(chartData, chartLabel,\n    {\n      'pop': population,\n      'infected': infectedPercent,\n      'radius': contagiousRadius,\n      'rate': susceptibleRate,\n      'time': recoveryTime\n    })\n  const prevChart = createChart(prevChartData, prevChartLabel, chartProps)\n\n  function createSlider(name, parameter, paramfunc, maxVal, minVal, stepSize) {\n    return (\n      <div>\n        <Typography id=\"range-slider\" gutterBottom style={{ fontSize: 12 }}>\n          {name}\n        </Typography>\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\n          <div style={{ width: 300 }}>\n            <Slider\n              value={parameter}\n              onChange={(event, value) => paramfunc(value)}\n              valueLabelDisplay=\"auto\"\n              aria-labelledby=\"range-slider\"\n              min={minVal}\n              max={maxVal}\n              step={stepSize}\n              disabled={startDisabled}\n            />\n          </div>\n          <div style={{ marginLeft: 10 }}>\n            <Input\n              value={parameter}\n              margin=\"dense\"\n              onChange={(event) => (event.target.value) ? paramfunc(event.target.value) : () => { }}\n              inputProps={{\n                step: stepSize,\n                min: minVal,\n                max: maxVal,\n                type: 'number',\n                'aria-labelledby': 'input-slider',\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'flex-start', alignItems: 'flex-start', padding: '15px 0 0 50px' }}>\n        <div style={{ width: 336 }}>\n          <div style={{ display: 'flex', marginBottom: 5 }}>\n            <div style={{ display: 'flex', flex: 0.5, fontSize: 14, justifyContent: 'flex-start' }}># Infected cases: {infected.length}</div>\n            <div style={{ display: 'flex', flex: 0.5, fontSize: 14, justifyContent: 'flex-end' }}># Active cases: {infected.length - recovered.length}</div>\n          </div>\n          <div style={{ border: '3px solid black', width: 200, height: 200, flexWrap: 'wrap', flexDirection: 'row', display: 'flex', justifyContent: 'flex-start', alignItems: 'center', padding: 65, marginBottom: 20 }}>\n            {populationList.map((id) => {\n              if (id < Math.floor(population * infectedPercent / 100)) {\n                return (renderInfected(id))\n              } else {\n                return (renderHealthy(id))\n              }\n            })}\n          </div>\n          {createSlider('Population', population, setPopulation, 169, 1)}\n          {createSlider('Infected proportion (%)', infectedPercent, setInfectedPercent, 100, 0, 1)}\n          {createSlider('Contagious Radius (meters)', contagiousRadius, setContagiousRadius, 2, 1, 0.05)}\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', width: 350, height: 80, }}>\n            <div style={{ height: 7.5, width: 7.5, borderRadius: 7.5, backgroundColor: 'red' }} />\n            <img src={Ring} style={{ height: contagiousRadius * 25 + 5, width: contagiousRadius * 25 + 5, position: 'absolute' }} />\n          </div>\n          {createSlider('Susceptible Rate (%)', susceptibleRate, setSusceptibleRate, 100, 0, 1)}\n          {createSlider('Recovery time (units of time)', recoveryTime, setRecoveryTime, 10, 1, 1)}\n          <div style={{ marginTop: 10 }}>\n            <div style={{ display: 'flex', flexDirection: 'row' }}>\n              <div style={{ margin: 10 }}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{ width: 100 }}\n                  onClick={() => shuffle()}\n                  disabled={startDisabled}\n                >\n                  Shuffle\n                </Button>\n              </div>\n              <div style={{ margin: 10 }}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{ width: 100 }}\n                  onClick={() => {\n                    if (!startDisabled) {\n                      start()\n                      if (first) {\n                        setTimeout(() => {\n                          anime({\n                            targets: '.infected',\n                            background: '#808080',\n                            duration: 1000,\n                            easing: 'linear'\n                          })\n                          document.querySelectorAll('.infect.ring').forEach((item) => {\n                            item.remove()\n                          })\n                          for (var i = 0; i < Math.floor(population * infectedPercent / 100); i++) {\n                            setRecovered(recovered => [...recovered, i])\n                          }\n                          setFirst(false)\n                        }, 1000 * recoveryTime)\n                      }\n                    } else {\n                      anime.remove('.population')\n                    }\n                    setStartDisabled(!startDisabled)\n                  }}\n                >\n                  {(!startDisabled) ? 'Start' : 'Pause'}\n                </Button>\n              </div>\n              <div style={{ margin: 10 }}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{ width: 100 }}\n                  onClick={() => {\n                    anime.remove('.population')\n                    setPopulation(0)\n                    setTimeout(() => {\n                      setPopulation(52)\n                      setInfectedPercent(0)\n                      setSusceptibleRate(20)\n                      setContagiousRadius(1)\n                      setRecoveryTime(3)\n                    }, 100)\n                    if (chartData.length > 0) {\n                      setChartData([])\n                      setChartLabel([0])\n                      setStartDisabled(false)\n                      var data = [...chartData]\n                      var label = [...chartLabel]\n                      var props = {\n                        'pop': population,\n                        'infected': infectedPercent,\n                        'radius': contagiousRadius,\n                        'rate': susceptibleRate,\n                        'time': recoveryTime\n                      }\n                      setPrevChartData(data)\n                      setPrevChartLabel(label)\n                      setChartProps(props)\n                    }\n                    setFirst(true)\n                    setRecovered([])\n                  }}\n                >\n                  Reset\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div style={{ padding: 20, marginLeft: 60 }}>\n          {curChart}\n          {(prevChartData.length) ? (\n            <div>\n              <div style={{ margin: 40, fontWeight: 'bold', fontSize: 20, textAlign: 'center' }}>\n                Previous model\n              </div>\n              {prevChart}\n            </div>\n          ) : (\n            <></>\n          )}\n        </div>\n      </div>\n    </>\n  )\n}","import Typography from '@material-ui/core/Typography';\nimport { Slider, Button, Input } from '@material-ui/core';\nimport React, { useState, useEffect } from 'react';\nimport anime from 'animejs/lib/anime.es.js';\nimport './App.css';\nimport Ring from './circle.png';\nimport { Line, defaults } from 'react-chartjs-2';\n\ndefaults.plugins.tooltip.enabled = true\ndefaults.scale.beginAtZero = true\n\nexport default function App() {\n  const [population, setPopulation] = useState(52);\n  const [infectedPercent, setInfectedPercent] = useState(0)\n  const [contagiousRadius, setContagiousRadius] = useState(1)\n  const [susceptibleRate, setSusceptibleRate] = useState(20)\n  const [populationList, setPopulationList] = useState([])\n  const [startDisabled, setStartDisabled] = useState(false)\n  const [recoveryTime, setRecoveryTime] = useState(3)\n  const [healthy, setHealthy] = useState([])\n  const [infected, setInfected] = useState([])\n  const [recovered, setRecovered] = useState([])\n  const [chartData, setChartData] = useState([])\n  const [chartLabel, setChartLabel] = useState([0])\n  const [prevChartData, setPrevChartData] = useState([])\n  const [prevChartLabel, setPrevChartLabel] = useState([0])\n  const [chartProps, setChartProps] = useState({})\n  const [first, setFirst] = useState(true)\n\n  function renderHealthy(id) {\n    return (\n      <div class='population' id={id} style={{ margin: 5, display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\n        <img id={'ring'.concat(id)} src={Ring} style={{ width: 5, height: 5, position: 'absolute' }} />\n        <div id={'healthy'.concat(id)} style={{ width: 5, height: 5, borderRadius: '50%', backgroundColor: '#66FF33' }} />\n      </div>\n    )\n  }\n\n  function renderInfected(id) {\n    return (\n      <div class='population' id={id} style={{ margin: 5, display: 'flex', justifyContent: 'center', alignItems: 'center', position: 'relative' }}>\n        <img class='infect ring' src={Ring} style={{ width: 5, height: 5, position: 'absolute' }} />\n        <div id={'infected'.concat(id)} class='infected' style={{ width: 5, height: 5, borderRadius: '50%', backgroundColor: '#FF0000' }} />\n      </div>\n    )\n  }\n\n  useEffect(() => {\n    var pop = []\n    for (var i = 0; i < population; i++) {\n      pop.push(i)\n    }\n    setPopulationList(pop)\n    setInfected(pop.slice(0, Math.floor(population * infectedPercent / 100)))\n    setHealthy(pop.slice(Math.floor(population * infectedPercent / 100)))\n  }, [population, infectedPercent])\n\n  useEffect(() => {\n    if (startDisabled) {\n      var value = infected.slice(-1)[0]\n      clear(value)\n    }\n  }, [infected])\n\n  function clear(value) {\n    setHealthy(healthy => healthy.filter((item) => item !== value))\n    setTimeout(() => {\n      var target = document.getElementById('healthy'.concat(value))\n      anime({\n        targets: target,\n        background: '#808080',\n        duration: 1000,\n        easing: 'linear'\n      })\n      target = document.getElementById('ring'.concat(value))\n      if (target !== null) {\n        target.remove()\n      }\n      setHealthy(healthy => healthy.filter((item) => item !== value))\n      setRecovered(recovered => [...recovered, value])\n    }, 1000 * recoveryTime)\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (startDisabled) {\n        // if (infected.length - recovered.length !== 0) {\n        //   setChartData(chartData => [...chartData, infected.length - recovered.length])\n        //   var curTime = chartLabel.slice(-1)[0]\n        //   curTime += 1\n        //   setChartLabel(chartLabel => [...chartLabel, curTime])\n        // }\n        var curTime = chartLabel.slice(-1)[0]\n        curTime += 1\n        setChartLabel([...chartLabel, curTime])\n        setChartData([...chartData, infected.length - recovered.length])\n        for (var i = 0; i < healthy.length; i++) {\n          for (var j = 0; j < infected.length; j++) {\n            if (recovered.includes(infected[j])) {\n              continue\n            }\n            var element1 = document.getElementById(healthy[i])\n            var rect1 = element1.getBoundingClientRect();\n            var element2 = document.getElementById(infected[j])\n            var rect2 = element2.getBoundingClientRect();\n            var dist = Math.sqrt(Math.pow(rect1.top - rect2.top, 2) + Math.pow(rect1.left - rect2.left, 2))\n            if (dist < 25 * contagiousRadius) {\n              var rand = Math.random() * 100\n              if (rand < susceptibleRate) {\n                var el = document.getElementById('healthy'.concat(healthy[i]))\n                var ring = document.getElementById('ring'.concat(healthy[i]))\n                if (ring !== null) {\n                  ring.classList.add('ring')\n                }\n                anime({\n                  targets: el,\n                  background: '#FF0000',\n                  duration: 1000,\n                  easing: 'linear',\n                });\n                if (!infected.includes(healthy[i])) {\n                  setInfected(infected => [...infected, healthy[i]])\n                }\n                break\n              }\n            }\n          }\n        }\n      }\n    }, 1000)\n    return () => clearInterval(interval)\n  }, [startDisabled, healthy, infected, recovered])\n\n  function shuffle() {\n    var currentIndex = population, temporaryValue, randomIndex;\n    var pop = [...populationList]\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = pop[currentIndex];\n      pop[currentIndex] = pop[randomIndex];\n      pop[randomIndex] = temporaryValue;\n    }\n    setPopulationList(pop)\n  }\n\n  function start() {\n    anime({\n      targets: '.population',\n      translateX: function () {\n        return anime.random(-50, 50);\n      },\n      translateY: function () {\n        return anime.random(-50, 50);\n      },\n      easing: 'linear',\n      duration: 1000,\n      complete: start\n    });\n    anime({\n      targets: '.ring',\n      scale: {\n        value: [1, 4 * Math.sqrt(contagiousRadius)],\n        duration: 4000\n      },\n      opacity: {\n        value: [1, 0],\n        duration: 750,\n        easing: 'linear',\n      },\n      loop: true\n    })\n  }\n\n  function createChart(data, label, props) {\n    return (\n      <div style={{ display: 'flex', alignItems: 'center' }}>\n        <div style={{ width: 725 }}>\n          <Line\n            data={{\n              labels: label,\n              datasets: [\n                {\n                  label: '# of infected cases',\n                  data: data,\n                  fill: {\n                    target: 'origin',\n                    above: 'rgb(255, 100, 132)',\n                  },\n                  borderColor: 'rgba(255, 99, 132, 0.2)',\n                },\n              ],\n            }}\n            options={{\n              animation: false,\n              scales: {\n                x: {\n                  title: {\n                    text: 'Unit of time',\n                    display: true,\n                    font: { size: 14 }\n                  },\n                  grid: {\n                    display: false\n                  }\n                },\n                y: {\n                  max: props.pop + 10,\n                  title: {\n                    text: 'Infected cases',\n                    display: true,\n                    font: { size: 14 }\n                  },\n                }\n              },\n              elements: {\n                point: {\n                  radius: 0\n                }\n              },\n              plugins: {\n                legend: {\n                  labels: {\n                    font: {\n                      size: 14\n                    }\n                  }\n                }\n              }\n            }}\n          />\n        </div>\n        <div style={{ border: '3px solid black', display: 'flex', width: 200, height: 150, flexDirection: 'column', justifyContent: 'center', paddingLeft: 10, margin: '0 0 40px 40px' }}>\n          Population: {props.pop}\n          <br />\n          Infected proportion: {props.infected}%\n          <br />\n          Contagious radius: {props.radius}m\n          <br />\n          Susceptible Rate: {props.rate}%\n          <br />\n          Recovery Time: {props.time}\n        </div>\n      </div>\n    )\n  }\n\n  const curChart = createChart(chartData, chartLabel,\n    {\n      'pop': population,\n      'infected': infectedPercent,\n      'radius': contagiousRadius,\n      'rate': susceptibleRate,\n      'time': recoveryTime\n    })\n  const prevChart = createChart(prevChartData, prevChartLabel, chartProps)\n\n  function createSlider(name, parameter, paramfunc, maxVal, minVal, stepSize) {\n    return (\n      <div>\n        <Typography id=\"range-slider\" gutterBottom style={{ fontSize: 12 }}>\n          {name}\n        </Typography>\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\n          <div style={{ width: 300 }}>\n            <Slider\n              value={parameter}\n              onChange={(event, value) => paramfunc(value)}\n              valueLabelDisplay=\"auto\"\n              aria-labelledby=\"range-slider\"\n              min={minVal}\n              max={maxVal}\n              step={stepSize}\n              disabled={startDisabled}\n            />\n          </div>\n          <div style={{ marginLeft: 10 }}>\n            <Input\n              value={parameter}\n              margin=\"dense\"\n              onChange={(event) => (event.target.value) ? paramfunc(event.target.value) : () => { }}\n              inputProps={{\n                step: stepSize,\n                min: minVal,\n                max: maxVal,\n                type: 'number',\n                'aria-labelledby': 'input-slider',\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div style={{ display: 'flex', flexDirection: 'row', justifyContent: 'flex-start', alignItems: 'flex-start', padding: '15px 0 0 50px' }}>\n        <div style={{ width: 336 }}>\n          <div style={{ display: 'flex', marginBottom: 5 }}>\n            <div style={{ display: 'flex', flex: 0.5, fontSize: 14, justifyContent: 'flex-start' }}># Infected cases: {infected.length}</div>\n            <div style={{ display: 'flex', flex: 0.5, fontSize: 14, justifyContent: 'flex-end' }}># Active cases: {infected.length - recovered.length}</div>\n          </div>\n          <div style={{ border: '3px solid black', width: 200, height: 200, flexWrap: 'wrap', flexDirection: 'row', display: 'flex', justifyContent: 'flex-start', alignItems: 'center', padding: 65, marginBottom: 20 }}>\n            {populationList.map((id) => {\n              if (id < Math.floor(population * infectedPercent / 100)) {\n                return (renderInfected(id))\n              } else {\n                return (renderHealthy(id))\n              }\n            })}\n          </div>\n          {createSlider('Population', population, setPopulation, 169, 1)}\n          {createSlider('Infected proportion (%)', infectedPercent, setInfectedPercent, 100, 0, 1)}\n          {createSlider('Contagious Radius (meters)', contagiousRadius, setContagiousRadius, 2, 1, 0.05)}\n          <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', width: 350, height: 80, }}>\n            <div style={{ height: 7.5, width: 7.5, borderRadius: 7.5, backgroundColor: 'red' }} />\n            <img src={Ring} style={{ height: contagiousRadius * 25 + 5, width: contagiousRadius * 25 + 5, position: 'absolute' }} />\n          </div>\n          {createSlider('Susceptible Rate (%)', susceptibleRate, setSusceptibleRate, 100, 0, 1)}\n          {createSlider('Recovery time (units of time)', recoveryTime, setRecoveryTime, 10, 1, 1)}\n          <div style={{ marginTop: 10 }}>\n            <div style={{ display: 'flex', flexDirection: 'row' }}>\n              <div style={{ margin: 10 }}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{ width: 100 }}\n                  onClick={() => shuffle()}\n                  disabled={startDisabled}\n                >\n                  Shuffle\n                </Button>\n              </div>\n              <div style={{ margin: 10 }}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{ width: 100 }}\n                  onClick={() => {\n                    if (!startDisabled) {\n                      start()\n                      if (first) {\n                        setTimeout(() => {\n                          anime({\n                            targets: '.infected',\n                            background: '#808080',\n                            duration: 1000,\n                            easing: 'linear'\n                          })\n                          document.querySelectorAll('.infect.ring').forEach((item) => {\n                            item.remove()\n                          })\n                          for (var i = 0; i < Math.floor(population * infectedPercent / 100); i++) {\n                            setRecovered(recovered => [...recovered, i])\n                          }\n                          setFirst(false)\n                        }, 1000 * recoveryTime)\n                      }\n                    } else {\n                      anime.remove('.population')\n                    }\n                    setStartDisabled(!startDisabled)\n                  }}\n                >\n                  {(!startDisabled) ? 'Start' : 'Pause'}\n                </Button>\n              </div>\n              <div style={{ margin: 10 }}>\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  style={{ width: 100 }}\n                  onClick={() => {\n                    anime.remove('.population')\n                    setPopulation(0)\n                    setTimeout(() => {\n                      setPopulation(52)\n                      setInfectedPercent(0)\n                      setSusceptibleRate(20)\n                      setContagiousRadius(1)\n                      setRecoveryTime(3)\n                    }, 100)\n                    if (chartData.length > 0) {\n                      setChartData([])\n                      setChartLabel([0])\n                      setStartDisabled(false)\n                      var data = [...chartData]\n                      var label = [...chartLabel]\n                      var props = {\n                        'pop': population,\n                        'infected': infectedPercent,\n                        'radius': contagiousRadius,\n                        'rate': susceptibleRate,\n                        'time': recoveryTime\n                      }\n                      setPrevChartData(data)\n                      setPrevChartLabel(label)\n                      setChartProps(props)\n                    }\n                    setFirst(true)\n                    setRecovered([])\n                  }}\n                >\n                  Reset\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div style={{ padding: 20, marginLeft: 60 }}>\n          {curChart}\n          {(prevChartData.length) ? (\n            <div>\n              <div style={{ margin: 40, fontWeight: 'bold', fontSize: 20, textAlign: 'center' }}>\n                Previous model\n              </div>\n              {prevChart}\n            </div>\n          ) : (\n            <></>\n          )}\n        </div>\n      </div>\n    </>\n  )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Test from './test';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}